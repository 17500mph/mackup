#!/usr/bin/env python
"""Keep you application settings in sync"""

###########
# Imports #
###########


import argparse
import os.path
import sys


#################
# Configuration #
#################


# Location of the Dropbox folder
DROPBOX_FOLDER = os.environ['HOME'] + "/Dropbox"

# Location of the Mackup folder
MACKUP_FOLDER  = DROPBOX_FOLDER + "/Mackup"


####################
# Useful functions #
####################


def error(message):
    """
    Throw an error with the given message and immediatly quit.

    Args:
        message(str): The message to display.
    """
    sys.exit("Error: {}".format(message))


def check_for_usable_environment():
    """Check if the current env is usable and has everything's required"""
    # Do we have a home folder ?
    if not os.path.isdir(DROPBOX_FOLDER):
        msg = "Unable to find the Dropbox folder: {}".format(DROPBOX_FOLDER)
        error(msg)

    if not os.path.isdir(MACKUP_FOLDER):
        msg = "Unable to find the Mackup folder: {}".format(MACKUP_FOLDER)
        error(msg)


def parse_cmdline_args():
    """
    Setup the engine that's gonna parse the command line arguments

    Returns:
        (argparse.Namespace)
    """

    # Setup the global parser
    parser = argparse.ArgumentParser(
        description="Keep you application settings in sync",
        epilog=("Mackup requires a Dropbox folder to be located in your home"
                " folder and fully synced"))

    # Add the required arg
    parser.add_argument("action",
                        choices=['backup', 'restore'],
                        help=("Backup your conf files to Dropbox or restore"
                              " your files locally from Dropbox"))

    # Parse the command line and return the parsed options
    return parser.parse_args()


################
# Main Program #
################


def main():
    """Main function"""

    # Get the command line arg
    args = parse_cmdline_args()
    print "Going to {}".format(args.action)

    # Check the env where the command is being run
    check_for_usable_environment()

if __name__ == "__main__":
    main()
