#!/usr/bin/env python
"""Keep you application settings in sync"""

###########
# Imports #
###########


import argparse
import base64
import os.path
import shutil
import sys
import tempfile


#################
# Configuration #
#################


VERSION = '0.1'


#############
# Constants #
#############


# Mode used to backup files to Dropbox
BACKUP_MODE = 'backup'

# Mode used to restore files from Dropbox
RESTORE_MODE = 'restore'


#####################
# Supported plugins #
#####################


GIT_FILES = [".gitconfig"]


def backup_git():
    """Backup git config files"""
    # if exists home/git
    #   if home/git is real file
    #     if exists mackup/git
    #       are you sure ?
    #       if sure
    #         rm mackup/git
    #         mv home/git mackup/git
    #         link mackup/git home/git
    #     else
    #       mv home/git mackup/git
    #       link mackup/git home/git
    pass


def restore_git():
    """Restore git config files"""
    # if exists mackup/git
    #   if exists home/git
    #     are you sure ?
    #     if sure
    #       rm home/git
    #       link mackup/git home/git
    #   else
    #     link mackup/git home/git
    pass


####################
# Useful functions #
####################


def error(message):
    """
    Throw an error with the given message and immediatly quit.

    Args:
        message(str): The message to display.
    """
    sys.exit("Error: {}".format(message))


def parse_cmdline_args():
    """
    Setup the engine that's gonna parse the command line arguments

    Returns:
        (argparse.Namespace)
    """

    # Setup the global parser
    parser = argparse.ArgumentParser(
        description="Keep you application settings in sync",
        epilog="Mackup requires a fully synced Dropbox folder")

    # Add the required arg
    parser.add_argument("mode",
                        choices=[BACKUP_MODE, RESTORE_MODE],
                        help=("Backup your conf files to Dropbox or restore"
                              " your files locally from Dropbox"))

    # Parse the command line and return the parsed options
    return parser.parse_args()


def get_dropbox_folder_location():
    """
    Try to locate the Dropbox folder

    Returns:
        (str) Full path to the current Dropbox folder
    """
    host_db_path = os.environ['HOME'] + '/.dropbox/host.db'
    with open(host_db_path, 'r') as f:
        data = f.read().split()
    dropbox_home = base64.b64decode(data[1])

    return dropbox_home


class Mackup(object):
    """Main Mackup class"""

    def __init__(self):
        """Mackup Constructor"""
        try:
            self.dropbox_folder = get_dropbox_folder_location()
        except IOError:
            error(("Unable to find the Dropbox folder."
                   " If Dropbox is not installed and running, go for it on"
                   " <http://www.dropbox.com/>"))

        self.mackup_folder = self.dropbox_folder + '/Mackup'
        self.temp_folder = tempfile.mkdtemp(prefix="mackup_tmp_")

    def _check_for_usable_environment(self):
        """Check if the current env is usable and has everything's required"""

        # Do we have a home folder ?
        if not os.path.isdir(self.dropbox_folder):
            error(("Unable to find the Dropbox folder."
                   " If Dropbox is not installed and running, go for it on"
                   " <http://www.dropbox.com/>"))

    def check_for_usable_backup_env(self):
        """Check if the current env can be used to back up files"""
        self._check_for_usable_environment()

    def check_for_usable_restore_env(self):
        """Check if the current env can be used to restore files"""
        self._check_for_usable_environment()

        if not os.path.isdir(self.mackup_folder):
            error("Unable to find the Mackup folder: {}"
                  .format(self.mackup_folder))

    def clean_temp_folder(self):
        """Delete the temp folder and files created while running"""
        shutil.rmtree(self.temp_folder)


################
# Main Program #
################


def main():
    """Main function"""

    # Get the command line arg
    args = parse_cmdline_args()
    print "Going to {}".format(args.mode)

    mackup = Mackup()

    if args.mode == BACKUP_MODE:
        # Check the env where the command is being run
        mackup.check_for_usable_backup_env()
    elif args.mode == RESTORE_MODE:
        # Check the env where the command is being run
        mackup.check_for_usable_restore_env()
    else:
        raise ValueError("Unsupported mode: {}".format(args.mode))

    # Delete the tmp folder
    mackup.clean_temp_folder()

if __name__ == "__main__":
    main()
